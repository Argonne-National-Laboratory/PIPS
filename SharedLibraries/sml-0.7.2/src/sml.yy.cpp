/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 134
#define YY_END_OF_BUFFER 135
static yyconst short int yy_acclist[593] =
    {   0,
      135,  134,    7,  134,  106,  134,    6,  134,  134,  128,
      134,  129,  134,  100,  134,   98,  134,  124,  134,   99,
      134,  123,  134,  101,  134,    3,    4,  134,  130,  134,
      125,  134,  111,  134,  114,  134,  112,  134,  133,  134,
      133,  134,  126,  134,  127,  134,  103,  134,  133,  134,
      133,  134,  133,  134,  133,  134,  133,  134,  133,  134,
      133,  134,  133,  134,  133,  134,  133,  134,  133,  134,
      133,  134,  133,  134,  133,  134,  133,  134,  133,  134,
      133,  134,  133,  134,  133,  134,  121,  134,  134,  122,
      134,  133,  134,  133,  134,  133,  134,  133,  134,  107,

        6,  105,  102,    3,    4,    2,  113,    4,   97,  108,
      110,  109,  133,  133,  133,  133,  133,  133,   27,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,   63,  133,   96,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,   67,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,   13,  133,  133,  133,  133,
      133,  133,  133,  133,  104,  133,  133,  133,  133,    1,
        4,    4,  131,  133,  133,   66,  133,   23,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,

      133,  133,  133,  133,   30,  133,  133,  133,   59,  133,
      133,  133,   57,  133,   75,  133,  133,  133,  133,    5,
      133,  118,  133,  133,  133,   55,  133,   32,  133,  133,
       31,  133,   29,  133,  133,  133,   70,  133,   10,  133,
      133,   84,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,   88,  133,  133,  133,  133,  133,  133,  133,
       94,  133,  133,  133,  133,  133,  133,  133,  133,   86,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,   76,  133,  133,  133,  133,    8,  133,  133,  133,
       53,  133,  133,  133,  116,  133,  133,  133,   38,  133,

       65,  133,  133,  133,  133,  133,   12,  133,  133,  133,
      133,   82,  133,   28,  133,  133,  133,  133,  133,  133,
       77,  133,  133,  133,   85,  133,  133,  133,   61,  133,
       79,  133,  133,   95,  133,   42,  133,  133,  133,  133,
      133,   93,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,   64,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,   49,  133,
       35,  133,  133,   36,  133,    8,  133,    9,  133,  117,
      133,  133,  133,  133,   17,  133,  133,  133,   81,  133,
      133,  133,  133,  133,  133,  118,  133,  133,  133,  133,

       50,  133,  133,  133,   78,  133,  133,  133,  133,   87,
      133,   80,  133,   40,  133,  133,  133,   43,  133,  133,
      133,   26,  133,   48,  133,  133,   45,  133,  133,  133,
      133,  133,  133,  133,  133,   58,  133,  115,  133,  133,
       18,  133,   73,  133,  133,   47,  133,  133,  133,  133,
      133,  133,   34,  133,  133,  133,  133,  133,  133,  133,
       68,  133,   69,  133,   62,  133,  133,  133,  133,  133,
      133,   83,  133,  133,   15,  133,  133,  133,   54,  133,
      133,   41,  133,  133,   74,  133,  133,  133,  133,   72,
      133,  133,  133,  120,  133,  133,  133,  133,   46,  133,

       71,  133,  133,  133,  133,  133,  133,  133,   11,  133,
      133,  133,  133,   37,  133,  133,   39,   52,  133,   33,
      133,  133,  133,  133,   16,  133,  133,   19,  133,   95,
      133,   44,  133,  133,  133,  133,   92,  133,  133,  119,
      133,   14,  133,   51,  133,  133,  132,  133,   20,  133,
      133,  133,  133,   60,  133,  133,   89,  133,   90,  133,
      133,   21,  133,   56,  133,  133,   22,  133,  133,  133,
      133,   17,  133,  118,  133,   91,  133,  133,  133,  133,
      116,  133,  133,   25,  133,  133,  133,  133,  118,  133,
       24,  133

    } ;

static yyconst short int yy_accept[451] =
    {   0,
        1,    1,    1,    1,    1,    2,    3,    5,    7,    9,
       10,   12,   14,   16,   18,   20,   22,   24,   26,   29,
       31,   33,   35,   37,   39,   41,   43,   45,   47,   49,
       51,   53,   55,   57,   59,   61,   63,   65,   67,   69,
       71,   73,   75,   77,   79,   81,   83,   85,   87,   89,
       90,   92,   94,   96,   98,  100,  101,  102,  103,  104,
      106,  108,  109,  109,  110,  111,  112,  113,  114,  115,
      116,  117,  118,  119,  121,  122,  123,  124,  125,  126,
      127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
      137,  138,  140,  142,  143,  144,  145,  146,  147,  148,

      149,  150,  151,  152,  154,  155,  156,  157,  158,  159,
      159,  160,  161,  162,  163,  164,  165,  166,  168,  169,
      170,  171,  172,  173,  174,  175,  176,  177,  178,  179,
      180,  181,  182,  183,  185,  186,  188,  190,  191,  192,
      193,  194,  195,  196,  197,  198,  199,  200,  201,  202,
      203,  204,  205,  207,  208,  209,  211,  212,  213,  215,
      217,  218,  219,  220,  222,  224,  225,  226,  228,  230,
      231,  233,  235,  236,  237,  239,  241,  242,  244,  245,
      246,  247,  248,  249,  250,  251,  252,  253,  253,  255,
      256,  257,  258,  259,  260,  261,  263,  264,  265,  266,

      267,  268,  269,  270,  272,  273,  274,  275,  276,  277,
      278,  279,  280,  281,  282,  284,  285,  286,  287,  289,
      290,  291,  293,  294,  295,  297,  298,  299,  301,  303,
      304,  305,  306,  307,  309,  310,  311,  312,  314,  316,
      317,  318,  319,  320,  321,  323,  324,  325,  327,  328,
      329,  331,  333,  334,  336,  338,  339,  340,  341,  342,
      343,  344,  345,  346,  347,  348,  349,  350,  351,  352,
      353,  355,  356,  357,  358,  359,  360,  361,  362,  363,
      364,  365,  366,  367,  368,  369,  371,  373,  374,  376,
      378,  380,  382,  383,  384,  385,  387,  388,  389,  391,

      392,  393,  394,  395,  396,  398,  399,  400,  401,  403,
      404,  405,  407,  408,  409,  410,  412,  414,  416,  417,
      418,  420,  421,  422,  424,  426,  427,  429,  430,  431,
      431,  432,  433,  434,  435,  436,  438,  440,  441,  443,
      445,  446,  448,  449,  450,  451,  452,  453,  455,  456,
      457,  458,  459,  460,  461,  463,  465,  467,  468,  469,
      470,  471,  472,  474,  475,  477,  478,  479,  481,  482,
      484,  485,  487,  488,  489,  490,  492,  493,  493,  494,
      496,  497,  498,  499,  501,  503,  504,  505,  506,  507,
      508,  509,  511,  512,  513,  514,  516,  517,  520,  522,

      523,  524,  525,  527,  528,  530,  532,  534,  535,  536,
      537,  538,  539,  540,  542,  544,  546,  547,  549,  551,
      552,  553,  554,  556,  557,  559,  561,  562,  564,  566,
      567,  569,  570,  571,  572,  574,  576,  578,  579,  580,
      581,  583,  584,  586,  587,  588,  589,  591,  593,  593
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    1,    1,    7,    1,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,   19,   20,
       21,   22,    1,    1,   23,   23,   23,   24,   25,   23,
       23,   23,   23,   23,   23,   23,   26,   27,   23,   23,
       23,   23,   28,   23,   23,   23,   23,   23,   23,   23,
       29,    1,   30,   31,   32,    1,   33,   34,   35,   36,

       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[62] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    1,    1,
        1
    } ;

static yyconst short int yy_base[452] =
    {   0,
        0,    0,   38,   43,  489,  490,  490,  467,    0,  480,
      490,  490,  476,  490,  490,   56,  471,  490,   60,  463,
      490,  462,  461,  460,    0,  424,  490,  490,  490,   29,
       37,   49,   50,   42,   54,   46,   69,   72,   71,   76,
       70,  426,  441,   98,   74,   77,  444,   89,  490,  416,
      490,  418,  441,  436,  420,  490,    0,  490,  490,  117,
      490,  127,   99,  490,  490,  490,  490,    0,  423,  101,
      435,  423,  421,    0,  417,  429,  415,  417,   26,  416,
      410,   94,  102,  414,  409,  423,  417,  107,  407,  409,
      409,    0,  123,  403,   97,  397,  407,  405,  414,  110,

      397,  406,  395,  410,  395,  396,  130,  402,  122,  390,
      389,  403,  395,  127,  134,  393,  400,  404,  140,  399,
      393,  383,  391,  379,  389,  490,  383,  372,  375,  379,
      490,  166,  168,    0,  388,    0,    0,  391,  388,  386,
      386,  385,  368,  380,  380,  365,  382,  381,  376,  374,
      374,  362,    0,  361,  371,    0,  356,  355,    0,  147,
      360,  369,  359,    0,  365,  349,  349,    0,  358,  364,
      356,  359,  363,  342,    0,  356,  351,  149,  358,  353,
      335,  342,  351,  334,  348,  150,  347,  369,  335,  337,
      135,  341,  344,  336,  339,    0,  159,  330,  340,  333,

      326,  339,  325,    0,  326,  329,  316,  334,  325,  310,
      329,  312,  312,  318,    0,  317,  306,  321,  319,  306,
      304,    0,  301,  303,  315,  305,  306,    0,    0,  297,
      296,  303,  313,    0,  293,  291,  151,    0,    0,  298,
      305,  296,  296,  153,  284,  303,  290,    0,  286,  290,
        0,  279,  281,  279,    0,  298,  278,  282,  278,  490,
      289,  282,  273,  287,  286,  282,  192,  280,  273,  278,
        0,  271,  261,  270,  263,  275,  276,  271,  274,  265,
      264,  261,  267,  254,  248,    0,    0,  260,    0,    0,
        0,    0,  259,  257,  251,  249,  266,  247,    0,  253,

      244,  254,  258,  256,  241,  250,  240,  248,    0,  242,
      234,    0,  234,  239,  247,    0,    0,  245,  247,  229,
        0,  230,  228,    0,    0,  237,    0,  226,  243,  223,
      239,  217,  228,  233,  225,    0,    0,  232,    0,    0,
      222,    0,  226,  213,  215,  231,  216,    0,  229,  209,
      219,  222,  217,  200,    0,    0,    0,  209,  218,  204,
      216,  146,    0,  147,    0,  200,  210,    0,  214,    0,
      197,    0,  211,  210,  199,    0,  194,  197,  191,    0,
      201,  203,  203,    0,    0,  204,  193,  194,  185,  185,
      184,    0,  187,  185,  181,    0,  181,    0,    0,  191,

      188,  187,    0,  169,    0,    0,    0,  186,  175,  168,
      490,  215,  183,    0,    0,    0,  165,    0,    0,  175,
      180,  168,    0,  161,    0,    0,  175,    0,    0,  170,
        0,  169,  158,  171,    0,  166,    0,  171,  164,  117,
        0,  112,    0,   86,   76,   82,    0,    0,  490,  229,
       65
    } ;

static yyconst short int yy_def[452] =
    {   0,
      449,    1,    1,    1,  449,  449,  449,  449,  450,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  451,  451,  449,  449,  449,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  449,  449,
      449,  451,  451,  451,  451,  449,  450,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  451,  449,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  449,  451,  451,  451,  451,
      449,  449,  449,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  449,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  449,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  449,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  449,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      449,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,    0,  449,
      449
    } ;

static yyconst short int yy_nxt[552] =
    {   0,
        6,    7,    7,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   19,   20,   21,   22,
       23,   24,   25,   25,   26,   25,   25,   25,   27,   28,
       29,    6,   30,   31,   32,   33,   34,   35,   25,   25,
       36,   25,   25,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   25,   25,   25,   49,   50,
       51,   52,  144,   53,   54,   55,   52,   68,   53,   54,
       55,   60,   60,   62,   70,   60,   60,   72,   71,  145,
       73,   75,   81,   92,   63,   85,   82,   86,   76,   77,
       83,   93,   78,   74,   88,   79,   63,   87,   80,   84,

       89,   94,  105,   90,   96,   95,   91,  100,   97,  102,
      106,  110,   98,  117,  133,  133,  448,  101,   99,  107,
      118,  447,  119,  103,  120,  104,  446,  121,  123,  124,
       62,  148,   60,   60,  111,  135,  136,  112,  125,  150,
      131,   63,  132,  132,  113,  149,  151,  167,  168,  114,
      115,   63,  152,   63,  116,  153,  158,  163,  445,  192,
      164,  173,  159,   63,  248,  174,  181,  194,  444,  185,
      182,  195,  186,  193,  165,  187,  183,  200,  196,  232,
      201,  132,  132,  133,  133,  249,  257,  263,  264,  304,
       63,  233,  269,  310,  270,  330,  401,  402,  416,  311,

      305,  258,   63,  401,  402,  443,  442,  441,  440,  439,
      438,  437,  436,  435,  434,  433,  432,  431,  330,  430,
      429,  428,  427,  426,  425,  424,  423,  422,  331,   57,
      421,   57,  420,  419,  418,  417,  416,  416,  416,  415,
      414,  413,  412,  411,  410,  409,  408,  407,  406,  405,
      404,  403,  400,  399,  398,  397,  396,  395,  394,  393,
      392,  391,  390,  389,  388,  387,  386,  385,  384,  383,
      382,  381,  380,  379,  378,  377,  376,  375,  374,  373,
      372,  371,  370,  369,  368,  367,  366,  365,  364,  363,
      362,  361,  360,  359,  358,  357,  356,  355,  354,  353,

      352,  351,  350,  349,  348,  347,  346,  345,  344,  343,
      342,  341,  340,  339,  338,  337,  336,  335,  334,  333,
      332,  329,  328,  327,  326,  325,  324,  323,  322,  321,
      320,  319,  318,  317,  316,  315,  314,  313,  312,  309,
      308,  307,  306,  303,  302,  301,  300,  299,  298,  297,
      296,  295,  294,  293,  292,  291,  290,  289,  288,  287,
      286,  285,  284,  283,  282,  281,  280,  279,  278,  277,
      276,  275,  274,  273,  272,  271,  268,  267,  266,  265,
      262,  261,  260,  259,  256,  255,  254,  253,  252,  251,
      250,  247,  246,  245,  244,  243,  242,  241,  240,  239,

      238,  237,  236,  235,  234,  231,  230,  229,  228,  227,
      226,  225,  224,  223,  222,  221,  220,  219,  218,  217,
      216,  215,  214,  213,  212,  211,  210,  209,  208,  207,
      206,  205,  204,  203,  202,  199,  198,  197,  191,  190,
      189,  188,  184,  180,  179,  178,  177,  176,  175,  172,
      171,  170,  169,  166,  162,  161,  160,  157,  156,  155,
      154,  147,  146,  143,  142,  141,  140,  139,  138,  137,
      134,  130,  129,  128,  127,  126,  122,  109,  108,   69,
       67,   66,   65,   64,   61,   59,   58,   56,  449,    5,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449
    } ;

static yyconst short int yy_chk[552] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,   79,    3,    3,    3,    4,  451,    4,    4,
        4,   16,   16,   19,   30,   19,   19,   31,   30,   79,
       31,   32,   33,   36,   19,   34,   33,   34,   32,   32,
       33,   36,   32,   31,   35,   32,   19,   34,   32,   33,

       35,   37,   41,   35,   38,   37,   35,   39,   38,   40,
       41,   44,   38,   45,   63,   63,  446,   39,   38,   41,
       45,  445,   46,   40,   46,   40,  444,   46,   48,   48,
       60,   82,   60,   60,   44,   70,   70,   44,   48,   83,
       62,   60,   62,   62,   44,   82,   83,   95,   95,   44,
       44,   62,   83,   60,   44,   83,   88,   93,  442,  114,
       93,  100,   88,   62,  178,  100,  107,  115,  440,  109,
      107,  115,  109,  114,   93,  109,  107,  119,  115,  160,
      119,  132,  132,  133,  133,  178,  186,  191,  191,  237,
      132,  160,  197,  244,  197,  267,  362,  364,  439,  244,

      237,  186,  132,  362,  364,  438,  436,  434,  433,  432,
      430,  427,  424,  422,  421,  420,  417,  413,  412,  410,
      409,  408,  404,  402,  401,  400,  397,  395,  267,  450,
      394,  450,  393,  391,  390,  389,  388,  387,  386,  383,
      382,  381,  379,  378,  377,  375,  374,  373,  371,  369,
      367,  366,  361,  360,  359,  358,  354,  353,  352,  351,
      350,  349,  347,  346,  345,  344,  343,  341,  338,  335,
      334,  333,  332,  331,  330,  329,  328,  326,  323,  322,
      320,  319,  318,  315,  314,  313,  311,  310,  308,  307,
      306,  305,  304,  303,  302,  301,  300,  298,  297,  296,

      295,  294,  293,  288,  285,  284,  283,  282,  281,  280,
      279,  278,  277,  276,  275,  274,  273,  272,  270,  269,
      268,  266,  265,  264,  263,  262,  261,  259,  258,  257,
      256,  254,  253,  252,  250,  249,  247,  246,  245,  243,
      242,  241,  240,  236,  235,  233,  232,  231,  230,  227,
      226,  225,  224,  223,  221,  220,  219,  218,  217,  216,
      214,  213,  212,  211,  210,  209,  208,  207,  206,  205,
      203,  202,  201,  200,  199,  198,  195,  194,  193,  192,
      190,  189,  188,  187,  185,  184,  183,  182,  181,  180,
      179,  177,  176,  174,  173,  172,  171,  170,  169,  167,

      166,  165,  163,  162,  161,  158,  157,  155,  154,  152,
      151,  150,  149,  148,  147,  146,  145,  144,  143,  142,
      141,  140,  139,  138,  135,  130,  129,  128,  127,  125,
      124,  123,  122,  121,  120,  118,  117,  116,  113,  112,
      111,  110,  108,  106,  105,  104,  103,  102,  101,   99,
       98,   97,   96,   94,   91,   90,   89,   87,   86,   85,
       84,   81,   80,   78,   77,   76,   75,   73,   72,   71,
       69,   55,   54,   53,   52,   50,   47,   43,   42,   26,
       24,   23,   22,   20,   17,   13,   10,    8,    5,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "sml.yy.lpp"
#define INITIAL 0
/* (c) 2008,2009 Jonathan Hogg and Andreas Grothey, University of Edinburgh
 *
 * This file is part of SML.
 *
 * SML is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, using version 3 of the License.
 *
 * SML is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 */
#line 19 "sml.yy.lpp"
   #include "nodes.h"
   #include "sml.tab.h"
   /*#include "parser.h"*/
   #include <errno.h>
   #include <string.h>
//#define myreturn(id) printf("%s\n",#id)
#define myreturn(id) return(id)
//  YYSTYPE yylval;
#define accept_model_type 1

/* TODO:
   strings
   */
#line 751 "sml.yy.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 38 "sml.yy.lpp"


#line 905 "sml.yy.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 450 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 490 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 40 "sml.yy.lpp"
{
                long *dummy = new long;
                *dummy = strtol(yytext, NULL, 10);
                yylval.ival = dummy;
                
                if(errno == ERANGE)
                fprintf(stderr, "Value overflow on line %i with token:" \
                     "\n\"%s\"\n", yylineno, yytext);
                unput('.');unput('.');
                myreturn(INT_VAL);
               }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 51 "sml.yy.lpp"
myreturn(DOTDOT);
	YY_BREAK
/* Tokens with values */
case 3:
YY_RULE_SETUP
#line 53 "sml.yy.lpp"
{
            long *dummy = new long;
            *dummy = strtol(yytext, NULL, 10);
            yylval.ival = dummy;
            if(errno == ERANGE)
               fprintf(stderr, "Value overflow on line %i with token:" \
                     "\n\"%s\"\n", yylineno, yytext);
            myreturn(INT_VAL);
         }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 62 "sml.yy.lpp"
{
            double *dummy = new double;
            *dummy = strtod(yytext, NULL);
            yylval.fval = dummy;
            if(errno == ERANGE)
               fprintf(stderr, "Value overflow on line %i with token:" \
                     "\n\"%s\"\n", yylineno, yytext);
            myreturn(FLOAT_VAL);
         }
	YY_BREAK
/* Another type of value */
case 5:
YY_RULE_SETUP
#line 73 "sml.yy.lpp"
myreturn(INFINITY);
	YY_BREAK
/* comments */
case 6:
YY_RULE_SETUP
#line 76 "sml.yy.lpp"
//printf("\n-->%s\n",yytext); /* nothing */
	YY_BREAK
/* whitespace */
case 7:
YY_RULE_SETUP
#line 78 "sml.yy.lpp"
/* nothing */ 
	YY_BREAK
/* unknown */
case 8:
YY_RULE_SETUP
#line 81 "sml.yy.lpp"
myreturn(COEFF);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 82 "sml.yy.lpp"
myreturn(COVER);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 83 "sml.yy.lpp"
myreturn(OBJ);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 84 "sml.yy.lpp"
myreturn(DEFAULT);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 85 "sml.yy.lpp"
myreturn(FROM);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 86 "sml.yy.lpp"
myreturn(TO);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 87 "sml.yy.lpp"
myreturn(TO_COME);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 88 "sml.yy.lpp"
myreturn(NET_IN);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 89 "sml.yy.lpp"
myreturn(NET_OUT);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 90 "sml.yy.lpp"
myreturn(DIMEN);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 91 "sml.yy.lpp"
myreturn(USING);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 93 "sml.yy.lpp"
myreturn(ORDERED);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 94 "sml.yy.lpp"
myreturn(CIRCULAR);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 95 "sml.yy.lpp"
myreturn(REVERSED);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 96 "sml.yy.lpp"
myreturn(SYMBOLIC);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 97 "sml.yy.lpp"
myreturn(ARC);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 98 "sml.yy.lpp"
myreturn(DETERMINISTIC);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 99 "sml.yy.lpp"
myreturn(STOCHASTIC);
	YY_BREAK
/*random         myreturn(RANDOM); */
/*public         myreturn(PUBLIC); */
case 26:
YY_RULE_SETUP
#line 103 "sml.yy.lpp"
myreturn(SETOF);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 104 "sml.yy.lpp"
myreturn(BY);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 105 "sml.yy.lpp"
myreturn(LESS);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 106 "sml.yy.lpp"
myreturn(MOD);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 107 "sml.yy.lpp"
myreturn(DIV);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 108 "sml.yy.lpp"
myreturn(MIN); /*care function too*/
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 109 "sml.yy.lpp"
myreturn(MAX); /*care fn too*/
	YY_BREAK
/* Types */
case 33:
YY_RULE_SETUP
#line 112 "sml.yy.lpp"
myreturn(INTEGER);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 113 "sml.yy.lpp"
myreturn(BINARY);
	YY_BREAK
/* Imperative commands */
case 35:
YY_RULE_SETUP
#line 116 "sml.yy.lpp"
myreturn(CHECK);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 117 "sml.yy.lpp"
myreturn(CLOSE);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 118 "sml.yy.lpp"
myreturn(DISPLAY);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 119 "sml.yy.lpp"
myreturn(DROP);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 120 "sml.yy.lpp"
myreturn(INCLUDE);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 121 "sml.yy.lpp"
myreturn(PRINT);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 122 "sml.yy.lpp"
myreturn(PRINTF);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 123 "sml.yy.lpp"
myreturn(QUIT);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 124 "sml.yy.lpp"
myreturn(RESET);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 125 "sml.yy.lpp"
myreturn(RESTORE);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 126 "sml.yy.lpp"
myreturn(SOLVE);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 127 "sml.yy.lpp"
myreturn(UPDATE);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 128 "sml.yy.lpp"
myreturn(WRITE);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 129 "sml.yy.lpp"
myreturn(SHELL);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 130 "sml.yy.lpp"
myreturn(BLOCK);
	YY_BREAK
/*sblock         myreturn(SBLOCK);*/
case 50:
YY_RULE_SETUP
#line 132 "sml.yy.lpp"
{
                 BEGIN(accept_model_type);
                 myreturn(MODEL);
               }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 136 "sml.yy.lpp"
{
                 BEGIN(0);
                 myreturn(MODELTYPE);
               }
	YY_BREAK
/*begin          myreturn(BEG);*/
case 52:
YY_RULE_SETUP
#line 141 "sml.yy.lpp"
myreturn(INCLUDE);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 142 "sml.yy.lpp"
myreturn(DATA);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 143 "sml.yy.lpp"
myreturn(OPTION);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 144 "sml.yy.lpp"
myreturn(LET);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 145 "sml.yy.lpp"
myreturn(SOLUTION);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 146 "sml.yy.lpp"
myreturn(FIX);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 147 "sml.yy.lpp"
myreturn(UNFIX);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 148 "sml.yy.lpp"
myreturn(END);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 149 "sml.yy.lpp"
myreturn(FUNCTION);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 150 "sml.yy.lpp"
myreturn(PIPE);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 151 "sml.yy.lpp"
myreturn(FORMAT);
	YY_BREAK
/* Conditionals */
case 63:
YY_RULE_SETUP
#line 154 "sml.yy.lpp"
myreturn(IF);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 155 "sml.yy.lpp"
myreturn(THEN);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 156 "sml.yy.lpp"
myreturn(ELSE);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 157 "sml.yy.lpp"
myreturn(AND);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 158 "sml.yy.lpp"
myreturn(OR);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 159 "sml.yy.lpp"
myreturn(EXISTS);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 160 "sml.yy.lpp"
myreturn(FORALL);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 161 "sml.yy.lpp"
myreturn(NOT);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 162 "sml.yy.lpp"
myreturn(WITHIN);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 163 "sml.yy.lpp"
myreturn(STAGES);
	YY_BREAK
/*stage          myreturn(STAGE);*/
/*node           myreturn(NODE);*/
/* looping */
case 73:
YY_RULE_SETUP
#line 168 "sml.yy.lpp"
myreturn(WHILE);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 169 "sml.yy.lpp"
myreturn(REPEAT);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 170 "sml.yy.lpp"
myreturn(FOR);
	YY_BREAK
/* Set -> Scalar fns */
case 76:
YY_RULE_SETUP
#line 173 "sml.yy.lpp"
myreturn(CARD);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 174 "sml.yy.lpp"
myreturn(NEXT);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 175 "sml.yy.lpp"
myreturn(NEXTW);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 176 "sml.yy.lpp"
myreturn(PREV);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 177 "sml.yy.lpp"
myreturn(PREVW);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 178 "sml.yy.lpp"
myreturn(FIRST);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 179 "sml.yy.lpp"
myreturn(LAST);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 180 "sml.yy.lpp"
myreturn(MEMBER);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 181 "sml.yy.lpp"
myreturn(ORD);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 182 "sml.yy.lpp"
myreturn(ORD_ZERO);
	YY_BREAK
/* declarative */
case 86:
YY_RULE_SETUP
#line 185 "sml.yy.lpp"
myreturn(VAR);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 186 "sml.yy.lpp"
myreturn(PARAM);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 187 "sml.yy.lpp"
myreturn(SET);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 188 "sml.yy.lpp"
myreturn(MAXIMIZE);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 189 "sml.yy.lpp"
myreturn(MINIMIZE);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 190 "sml.yy.lpp"
myreturn(OBJECTIVE);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 191 "sml.yy.lpp"
myreturn(SUBJECTTO);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 192 "sml.yy.lpp"
myreturn(SUBJECTTO);
	YY_BREAK
/* iterative sum */
case 94:
YY_RULE_SETUP
#line 195 "sml.yy.lpp"
myreturn(SUM);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 196 "sml.yy.lpp"
myreturn(PROD);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 197 "sml.yy.lpp"
myreturn(IN);
	YY_BREAK
/* operators */
case 97:
YY_RULE_SETUP
#line 200 "sml.yy.lpp"
myreturn(DEFINED);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 201 "sml.yy.lpp"
myreturn('+');
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 202 "sml.yy.lpp"
myreturn('-');
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 203 "sml.yy.lpp"
myreturn('*');
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 204 "sml.yy.lpp"
myreturn('/');
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 205 "sml.yy.lpp"
myreturn(POWER);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 206 "sml.yy.lpp"
myreturn(POWER);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 207 "sml.yy.lpp"
myreturn(LOGICAL_OR);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 208 "sml.yy.lpp"
myreturn(LOGICAL_AND);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 209 "sml.yy.lpp"
myreturn('!');
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 210 "sml.yy.lpp"
myreturn(NE);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 211 "sml.yy.lpp"
myreturn(LE);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 212 "sml.yy.lpp"
myreturn(GE);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 213 "sml.yy.lpp"
myreturn(EQ);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 214 "sml.yy.lpp"
myreturn(LT);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 215 "sml.yy.lpp"
myreturn(GT);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 216 "sml.yy.lpp"
myreturn(ELLIPSE);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 217 "sml.yy.lpp"
myreturn(ASSIGN);
	YY_BREAK
/* set operators */
case 115:
YY_RULE_SETUP
#line 220 "sml.yy.lpp"
myreturn(UNION);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 221 "sml.yy.lpp"
myreturn(DIFF);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 222 "sml.yy.lpp"
myreturn(CROSS);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 223 "sml.yy.lpp"
myreturn(INTER);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 224 "sml.yy.lpp"
myreturn(SYMDIFF);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 225 "sml.yy.lpp"
myreturn(SUFFIX);
	YY_BREAK
/* punctuation */
case 121:
YY_RULE_SETUP
#line 228 "sml.yy.lpp"
myreturn(LBRACE);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 229 "sml.yy.lpp"
myreturn(RBRACE);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 230 "sml.yy.lpp"
myreturn(DOT);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 231 "sml.yy.lpp"
myreturn(COMMA);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 232 "sml.yy.lpp"
myreturn(SEMICOLON);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 233 "sml.yy.lpp"
myreturn(LSBRACKET);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 234 "sml.yy.lpp"
myreturn(RSBRACKET);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 235 "sml.yy.lpp"
myreturn(LBRACKET);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 236 "sml.yy.lpp"
myreturn(RBRACKET);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 237 "sml.yy.lpp"
myreturn(COLON);
	YY_BREAK
/* special stuff */
case 131:
YY_RULE_SETUP
#line 241 "sml.yy.lpp"
myreturn(EXPECTATION);
	YY_BREAK
/*TimeStage   myreturn(TIMESTAGE);*/
case 132:
YY_RULE_SETUP
#line 243 "sml.yy.lpp"
myreturn(ANCESTOR);
	YY_BREAK
/* Else it mut be an identifyer */
case 133:
YY_RULE_SETUP
#line 246 "sml.yy.lpp"
{
         yylval.string = strdup(yytext);
         BEGIN(0);
         myreturn(ID);
      }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 251 "sml.yy.lpp"
ECHO;
	YY_BREAK
#line 1726 "sml.yy.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(accept_model_type):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 450 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 450 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 449);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 251 "sml.yy.lpp"

