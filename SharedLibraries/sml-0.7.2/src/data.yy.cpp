#define yy_create_buffer data_create_buffer
#define yy_delete_buffer data_delete_buffer
#define yy_scan_buffer data_scan_buffer
#define yy_scan_string data_scan_string
#define yy_scan_bytes data_scan_bytes
#define yy_flex_debug data_flex_debug
#define yy_init_buffer data_init_buffer
#define yy_flush_buffer data_flush_buffer
#define yy_load_buffer_state data_load_buffer_state
#define yy_switch_to_buffer data_switch_to_buffer
#define yyin datain
#define yyleng dataleng
#define yylex datalex
#define yyout dataout
#define yyrestart datarestart
#define yytext datatext
#define yylineno datalineno

/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 139
#define YY_END_OF_BUFFER 140
static yyconst short int yy_acclist[662] =
    {   0,
      140,  139,    3,  139,  111,  139,  139,    2,  139,  139,
      139,  133,  139,  134,  139,  105,  139,  103,  139,  129,
      139,  104,  139,  128,  139,  106,  139,  138,  139,  135,
      139,  130,  139,  116,  139,  119,  139,  117,  139,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,  131,  139,  132,  139,  108,
      139,  138,  139,  138,  139,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,  126,

      139,  139,  127,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  112,    2,  110,  107,  138,  118,  138,  102,
      113,  115,  114,  138,  138,  138,  138,  138,  138,  138,
      138,  138,    9,  138,  138,  138,  138,  138,  138,  138,
       25,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,   65,  138,
      101,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,   69,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  109,  138,

      138,  138,  138,    1,    1,  138,  138,  138,   60,  138,
      136,  138,  138,  138,  138,  138,  138,   68,  138,   19,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,   28,  138,
      138,  138,  138,  138,   58,  138,   80,  138,  138,  138,
      123,  138,  138,  138,   56,  138,   30,  138,  138,   29,
      138,   27,  138,  138,  138,  138,   72,  138,    6,  138,
      138,   89,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,   93,  138,  138,  138,
      138,  138,  138,  138,   99,  138,  138,  138,  138,  138,

      138,  138,  138,   91,  138,  138,  138,  138,  138,  138,
      138,  138,   64,  138,  138,   52,  138,    8,  138,  138,
      138,  138,  138,  138,  138,  138,   81,  138,  138,  138,
      138,    4,  138,  138,  138,   54,  138,  138,  138,  121,
      138,  138,  138,   36,  138,   67,  138,  138,  138,  138,
      138,  138,  138,  138,   87,  138,   26,  138,  138,  138,
      138,  138,  138,   82,  138,   77,  138,  138,  138,   90,
      138,  138,  138,   62,  138,   84,  138,  138,  100,  138,
      138,   40,  138,  138,  138,  138,  138,  138,   98,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,

      138,   66,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,   51,  138,   47,  138,  138,
       49,  138,  138,  138,  138,   33,  138,  138,   34,  138,
        4,  138,    5,  138,  122,  138,  138,  138,  138,   13,
      138,  138,  138,   86,  138,  138,  138,  138,  138,  138,
      123,  138,  138,  138,  138,  138,  138,   83,  138,  138,
      138,  138,   92,  138,   85,  138,   38,  138,  138,  138,
      138,  138,   41,  138,  138,  138,  138,   24,  138,   46,
      138,  138,   43,  138,   76,  138,  138,  138,  138,  138,
      138,  138,   59,  138,  120,  138,  138,   14,  138,   78,

      138,  138,   45,  138,  138,  138,  138,  138,  138,   75,
      138,  138,   32,  138,  138,  138,  138,  138,  138,  138,
       70,  138,   71,  138,   63,  138,  138,  138,  138,  138,
      138,   88,  138,  138,   11,  138,  138,  138,   55,  138,
      138,   39,  138,  138,   23,  138,   22,  138,   79,  138,
      138,  138,   48,  138,  138,   74,  138,  138,  138,  125,
      138,  138,  138,  138,   44,  138,   73,  138,  138,  138,
      138,  138,   53,  138,  138,  138,    7,  138,  138,  138,
      138,   35,  138,  138,   37,   53,  138,   31,  138,  138,
      138,  138,   12,  138,  138,   15,  138,  100,  138,   42,

      138,  138,  138,  138,   97,  138,  138,  124,  138,   10,
      138,   50,  138,  138,  138,   16,  138,  138,  138,  138,
       61,  138,  138,   94,  138,   95,  138,  138,   17,  138,
       57,  138,  138,   18,  138,  138,  137,  138,  138,  138,
       13,  138,  123,  138,   96,  138,  138,  138,  138,  121,
      138,  138,   21,  138,  138,  138,  138,  123,  138,   20,
      138
    } ;

static yyconst short int yy_accept[511] =
    {   0,
        1,    1,    1,    1,    1,    2,    3,    5,    7,    8,
       10,   11,   12,   14,   16,   18,   20,   22,   24,   26,
       28,   30,   32,   34,   36,   38,   40,   42,   44,   46,
       48,   50,   52,   54,   56,   58,   60,   62,   64,   66,
       68,   70,   72,   74,   76,   78,   80,   82,   84,   86,
       88,   90,   92,   94,   96,   98,  100,  102,  103,  105,
      107,  109,  111,  113,  114,  114,  114,  115,  116,  116,
      116,  116,  117,  118,  119,  120,  121,  122,  123,  124,
      125,  126,  127,  128,  129,  130,  131,  132,  133,  135,
      136,  137,  138,  139,  140,  141,  143,  144,  145,  146,

      147,  148,  149,  150,  151,  152,  153,  154,  155,  156,
      157,  158,  159,  161,  163,  164,  165,  166,  167,  168,
      169,  170,  171,  172,  173,  175,  176,  177,  178,  179,
      180,  181,  182,  183,  184,  185,  186,  187,  188,  189,
      190,  191,  192,  193,  194,  195,  196,  197,  198,  199,
      200,  201,  202,  203,  204,  205,  206,  206,  207,  208,
      209,  211,  213,  214,  215,  216,  217,  218,  220,  222,
      223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
      233,  234,  235,  236,  237,  238,  239,  241,  242,  243,
      244,  245,  247,  249,  250,  251,  253,  254,  255,  257,

      259,  260,  262,  264,  265,  266,  267,  269,  271,  272,
      274,  275,  276,  277,  278,  279,  280,  281,  282,  283,
      284,  285,  286,  287,  289,  290,  291,  292,  293,  294,
      295,  297,  298,  299,  300,  301,  302,  303,  304,  306,
      307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
      318,  320,  321,  322,  323,  324,  325,  326,  327,  329,
      330,  331,  332,  334,  335,  336,  338,  339,  340,  342,
      343,  344,  346,  348,  349,  350,  351,  352,  353,  354,
      355,  357,  359,  360,  361,  362,  363,  364,  366,  368,
      369,  370,  372,  373,  374,  376,  378,  379,  381,  382,

      384,  385,  386,  387,  388,  389,  391,  392,  393,  394,
      395,  396,  397,  398,  399,  400,  401,  402,  404,  405,
      406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
      416,  418,  420,  421,  423,  424,  425,  426,  428,  429,
      431,  433,  435,  437,  438,  439,  440,  442,  443,  444,
      446,  447,  448,  449,  450,  451,  453,  454,  455,  456,
      457,  458,  460,  461,  462,  463,  465,  467,  469,  470,
      471,  472,  473,  475,  476,  477,  478,  480,  482,  483,
      485,  487,  488,  488,  489,  490,  491,  492,  493,  495,
      497,  498,  500,  502,  503,  505,  506,  507,  508,  509,

      510,  512,  513,  515,  516,  517,  518,  519,  520,  521,
      523,  525,  527,  528,  529,  530,  531,  532,  534,  535,
      537,  538,  539,  541,  542,  544,  545,  547,  549,  551,
      552,  553,  555,  556,  558,  559,  559,  560,  562,  563,
      564,  565,  567,  569,  570,  571,  572,  573,  575,  576,
      577,  579,  580,  581,  582,  584,  585,  588,  590,  591,
      592,  593,  595,  596,  598,  600,  602,  603,  604,  605,
      606,  607,  608,  610,  612,  614,  615,  616,  618,  619,
      620,  621,  623,  624,  626,  628,  629,  631,  633,  634,
      636,  637,  639,  640,  641,  643,  645,  647,  648,  649,

      650,  652,  653,  655,  656,  657,  658,  660,  662,  662
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    1,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    1,    1,   25,   26,   27,   28,   29,   30,
       31,   19,   32,   19,   33,   34,   35,   36,   37,   19,
       19,   38,   39,   40,   41,   19,   19,   19,   19,   19,
       42,    1,   43,   44,   45,    1,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    1,    4,    4,    1,
        1,    1,    1,    1,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    1,    1,    1,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    1,    1,    1
    } ;

static yyconst short int yy_base[515] =
    {   0,
        0,    0,   47,   49,  554,  555,  555,  530,  546,    0,
      543,  541,  484,  555,  536,  555,  555,    0,  531,  555,
        0,  523,  555,  522,  521,  520,   47,  505,   42,  503,
      504,  502,  498,   42,  555,  555,  555,   28,   40,   46,
       58,   36,   47,   63,   52,   69,   66,   70,   74,  471,
       84,  102,   72,   77,  490,   90,  555,  462,  555,  464,
       43,  483,   95,  555,  526,  525,    0,  555,  521,  520,
      465,  555,    0,  555,    0,  555,  555,  555,  555,  496,
      489,  487,  496,  462,  485,  494,  492,  494,    0,  460,
      468,  468,  463,  455,  453,    0,  449,  461,  447,  449,

       96,  448,  442,   91,  106,  446,  441,  455,  449,   76,
      439,  442,    0,  100,  436,   86,  430,  440,  438,  447,
       89,  112,  440,  429,  444,  429,  430,  121,  443,  435,
      429,  115,  422,  429,  420,  434,  426,  120,  127,  424,
      431,  435,   73,  430,  424,  414,  422,  410,  420,  555,
      414,  403,  406,  410,  463,  459,  456,  434,  438,  435,
        0,    0,  428,  428,  432,  429,  409,    0,    0,  404,
      411,  408,  406,  406,  405,  388,  400,  400,  399,  384,
      401,  400,  395,  393,  393,  381,    0,  380,  390,  375,
      374,    0,  137,  389,  379,  385,  369,  369,    0,  378,

      384,  376,  379,  383,  362,  376,    0,  375,  370,  151,
      377,  372,  354,  361,  370,  361,  352,  367,  365,  134,
      364,  397,  352,  351,  353,  120,  357,  360,  352,  355,
        0,  141,  346,  356,  349,  342,  355,  341,    0,  342,
      345,  332,  350,  341,  326,  345,  555,  356,  358,    0,
        0,  349,  355,  359,  348,  327,  322,  328,    0,  327,
      316,  331,  329,  316,  314,    0,  311,  313,  325,  315,
      316,    0,    0,  307,  306,  313,  323,  303,  301,  137,
        0,    0,  308,  315,  306,  306,  137,  294,    0,  313,
      300,    0,  296,  300,    0,  289,  291,  289,  300,    0,

      293,  306,  286,  290,  286,    0,  300,  296,  289,  280,
      294,  293,  289,  143,  287,  280,  285,    0,  278,  268,
      277,  270,  282,  283,  278,  281,  272,  271,  268,  274,
        0,    0,  298,    0,  286,  259,  253,    0,  265,    0,
        0,    0,    0,  264,  262,  256,  254,  271,  252,    0,
      258,  249,  259,  263,  261,  246,  255,  245,  253,  247,
      239,    0,  239,  244,  252,    0,    0,  250,  252,  251,
      240,  232,    0,  233,  231,  238,    0,    0,  239,    0,
      228,  245,  225,  241,  219,  230,  235,  227,    0,    0,
      234,    0,    0,  224,    0,  228,  215,  217,  233,  249,

        0,  231,    0,  230,  210,  220,  223,  218,  201,    0,
        0,    0,  210,  219,  205,  217,  132,    0,  134,    0,
      201,  211,    0,  215,    0,  198,    0,    0,    0,  212,
      211,    0,  200,    0,  195,  198,  192,    0,  202,  204,
      204,    0,    0,  205,  194,  195,  186,    0,  197,  185,
        0,  188,  187,  185,    0,  185,    0,    0,  195,  192,
      191,    0,  173,    0,    0,    0,  190,  179,  172,  555,
      232,  187,    0,    0,    0,  169,  183,    0,  178,  183,
      171,    0,  164,    0,    0,  178,    0,    0,  173,    0,
      172,    0,  161,  174,    0,  169,    0,  174,  173,  155,

        0,  151,    0,  150,  143,  146,    0,    0,  555,  205,
      209,  213,  188,  215
    } ;

static yyconst short int yy_def[515] =
    {   0,
      509,    1,    1,    1,  509,  509,  509,  509,  510,  511,
      509,  512,  509,  509,  509,  509,  509,  513,  509,  509,
      514,  509,  509,  509,  509,  509,  514,  514,  514,  514,
      514,  514,  514,  514,  509,  509,  509,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  509,  509,  509,  514,
      514,  514,  514,  509,  510,  509,  511,  509,  512,  509,
      509,  509,  514,  509,  514,  509,  509,  509,  509,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,

      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  509,
      514,  514,  514,  514,  509,  509,  509,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,

      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  509,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,

      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  509,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,

      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  509,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  509,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,

      514,  514,  514,  514,  514,  514,  514,  514,    0,  509,
      509,  509,  509,  509
    } ;

static yyconst short int yy_nxt[630] =
    {   0,
        6,    7,    7,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   21,   22,
       23,   24,   25,   26,   21,   27,   28,   21,   29,   30,
       21,   31,   21,   21,   32,   21,   21,   21,   33,   34,
       21,   35,   36,   37,   21,   38,   39,   40,   41,   42,
       43,   21,   21,   44,   21,   21,   45,   46,   47,   48,
       49,   50,   51,   52,   53,   54,   55,   56,   21,   21,
       21,   57,   58,   59,   60,   80,   60,   83,   89,   87,
       81,   61,   62,   61,   62,   63,   91,   63,  152,   93,
       92,   97,  107,   94,  108,   90,   95,  115,   98,   99,

      110,  116,  100,  103,  109,  101,  111,  104,  102,   96,
       84,  105,  112,  113,  117,  121,  123,  133,  118,  126,
      106,  114,  119,  235,  141,  122,  236,  127,  120,  131,
      124,  142,  125,  132,   88,  143,  128,  144,  191,  129,
      145,  182,  147,  148,  192,  177,  383,  195,  134,  198,
      199,  135,  149,  204,  136,  183,  184,  205,  178,  154,
      206,  137,  179,  185,  196,  227,  138,  139,  292,  186,
      213,  140,  187,  229,  214,  219,  207,  230,  220,  228,
      215,  221,  276,  303,  231,  310,  311,  316,  355,  317,
      360,   73,  384,  508,  277,  460,  361,  461,  304,  356,

      293,  507,  460,  506,  461,   65,   65,   65,   65,   67,
      505,   67,   67,   69,   69,   69,   69,   75,   75,  504,
      475,  503,  502,  501,  500,  499,  498,  497,  496,  495,
      494,  493,  492,  491,  490,  383,  489,  488,  487,  486,
      485,  484,  483,  482,  481,  480,  479,  478,  477,  476,
      475,  475,  475,  474,  473,  472,  471,  470,  469,  468,
      467,  466,  465,  464,  463,  462,  459,  458,  457,  456,
      455,  454,  453,  452,  451,  450,  449,  448,  447,  446,
      445,  444,  443,  442,  441,  440,  439,  438,  437,  436,
      435,  434,  433,  432,  431,  430,  429,  428,  427,  426,

      425,  424,  423,  422,  421,  420,  419,  418,  417,  416,
      415,  414,  413,  412,  411,  410,  409,  408,  407,  406,
      405,  404,  403,  402,  401,  400,  399,  398,  397,  396,
      395,  394,  393,  392,  391,  390,  389,  388,  387,  386,
      385,  382,  381,  380,  379,  378,  377,  376,  375,  374,
      373,  372,  371,  370,  369,  368,  367,  366,  365,  364,
      363,  362,  334,  359,  358,  357,  354,  353,  352,  351,
      350,  349,  348,  347,  346,  345,  344,  343,  342,  341,
      340,  339,  338,  332,  337,  331,  336,  335,  334,  333,
      332,  331,  330,  329,  328,  327,  326,  325,  324,  323,

      322,  321,  320,  319,  318,  315,  314,  313,  312,  309,
      308,  307,  306,  305,  302,  301,  300,  299,  298,  297,
      296,  295,  294,  291,  290,  289,  288,  287,  286,  285,
      284,  283,  282,  281,  280,  279,  278,  275,  274,  273,
      272,  271,  270,  269,  268,  267,  266,  265,  264,  250,
      263,  262,  261,  260,  259,  258,  257,  256,  255,  254,
      253,  252,  251,  250,  249,  248,  247,   69,   65,  246,
      245,  244,  243,  242,  241,  240,  239,  238,  237,  234,
      233,  232,  226,  225,  224,  223,  222,  218,  217,  216,
      212,  211,  210,  209,  208,  203,  202,  201,  200,  197,

      194,  193,  190,  161,  189,  188,  181,  180,  176,  175,
      174,  173,  172,  171,  170,  169,  168,  167,  166,  165,
      164,  163,  162,  161,  160,  159,  158,  157,   69,  156,
       65,  155,  153,  151,  150,  146,  130,   88,   87,   86,
       85,   82,   79,   78,   77,   76,   74,   72,   71,   70,
       68,   66,   64,  509,    5,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,

      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509
    } ;

static yyconst short int yy_chk[630] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,   27,    4,   29,   34,   61,
       27,    3,    3,    4,    4,    3,   38,    4,   61,   39,
       38,   40,   42,   39,   42,   34,   39,   45,   40,   40,

       43,   45,   40,   41,   42,   40,   43,   41,   40,   39,
       29,   41,   43,   44,   46,   47,   48,   52,   46,   49,
       41,   44,   46,  143,   53,   47,  143,   49,   46,   51,
       48,   53,   48,   51,   63,   54,   49,   54,  110,   49,
       54,  104,   56,   56,  110,  101,  314,  114,   52,  116,
      116,   52,   56,  121,   52,  104,  105,  121,  101,   63,
      122,   52,  101,  105,  114,  138,   52,   52,  210,  105,
      128,   52,  105,  139,  128,  132,  122,  139,  132,  138,
      128,  132,  193,  220,  139,  226,  226,  232,  280,  232,
      287,  513,  314,  506,  193,  417,  287,  419,  220,  280,

      210,  505,  417,  504,  419,  510,  510,  510,  510,  511,
      502,  511,  511,  512,  512,  512,  512,  514,  514,  500,
      499,  498,  496,  494,  493,  491,  489,  486,  483,  481,
      480,  479,  477,  476,  472,  471,  469,  468,  467,  463,
      461,  460,  459,  456,  454,  453,  452,  450,  449,  447,
      446,  445,  444,  441,  440,  439,  437,  436,  435,  433,
      431,  430,  426,  424,  422,  421,  416,  415,  414,  413,
      409,  408,  407,  406,  405,  404,  402,  400,  399,  398,
      397,  396,  394,  391,  388,  387,  386,  385,  384,  383,
      382,  381,  379,  376,  375,  374,  372,  371,  370,  369,

      368,  365,  364,  363,  361,  360,  359,  358,  357,  356,
      355,  354,  353,  352,  351,  349,  348,  347,  346,  345,
      344,  339,  337,  336,  335,  333,  330,  329,  328,  327,
      326,  325,  324,  323,  322,  321,  320,  319,  317,  316,
      315,  313,  312,  311,  310,  309,  308,  307,  305,  304,
      303,  302,  301,  299,  298,  297,  296,  294,  293,  291,
      290,  288,  286,  285,  284,  283,  279,  278,  277,  276,
      275,  274,  271,  270,  269,  268,  267,  265,  264,  263,
      262,  261,  260,  258,  257,  256,  255,  254,  253,  252,
      249,  248,  246,  245,  244,  243,  242,  241,  240,  238,

      237,  236,  235,  234,  233,  230,  229,  228,  227,  225,
      224,  223,  222,  221,  219,  218,  217,  216,  215,  214,
      213,  212,  211,  209,  208,  206,  205,  204,  203,  202,
      201,  200,  198,  197,  196,  195,  194,  191,  190,  189,
      188,  186,  185,  184,  183,  182,  181,  180,  179,  178,
      177,  176,  175,  174,  173,  172,  171,  170,  167,  166,
      165,  164,  163,  160,  159,  158,  157,  156,  155,  154,
      153,  152,  151,  149,  148,  147,  146,  145,  144,  142,
      141,  140,  137,  136,  135,  134,  133,  131,  130,  129,
      127,  126,  125,  124,  123,  120,  119,  118,  117,  115,

      112,  111,  109,  108,  107,  106,  103,  102,  100,   99,
       98,   97,   95,   94,   93,   92,   91,   90,   88,   87,
       86,   85,   84,   83,   82,   81,   80,   71,   70,   69,
       66,   65,   62,   60,   58,   55,   50,   33,   32,   31,
       30,   28,   26,   25,   24,   22,   19,   15,   13,   12,
       11,    9,    8,    5,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,

      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "data.yy.lpp"
#define INITIAL 0
/* (c) 2008,2009 Jonathan Hogg and Andreas Grothey, University of Edinburgh
 *
 * This file is part of SML.
 *
 * SML is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, using version 3 of the License.
 *
 * SML is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 */
#line 20 "data.yy.lpp"
   #include "nodes.h"
   #include "data.tab.h"
   /*#include "parser.h"*/
   #include <errno.h>
   #include <string.h>
//#define myreturn(id) printf("%s\n",#id)
#define myreturn(id) return(id)
//  YYSTYPE yylval;
/* these here are just macro definitions: ID/DIGIT can be used in the rest
   of this *.l file as shortcuts. These lines don't do any matching */
#define accept_model_type 1

/* TODO:
   strings
   */
#line 819 "data.yy.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 42 "data.yy.lpp"


   /* Tokens with values */

   /* remove '//' and move to first column to re-activate */
   //-?{DIGIT}+ {
   //              long *dummy = new long;
   //              *dummy = strtol(yytext, NULL, 10);
   //              datalval.ival = dummy;
   //              if(errno == ERANGE)
   //                 fprintf(stderr, "Value overflow on line %i with token:"
   //                       "\n\"%s\"\n", yylineno, yytext);
   //             myreturn(INT_VAL);
   //           }
   //-?{DIGIT}+("."{DIGIT}*)?([eE]{DIGIT}+)?  {
   //              double *dummy = new double;
   //              *dummy = strtod(yytext, NULL);
   //              datalval.fval = dummy;
   //              if(errno == ERANGE)
   //                 fprintf(stderr, "Value overflow on line %i with token:"
   //                       "\n\"%s\"\n", yylineno, yytext);
   //              myreturn(FLOAT_VAL);
   //           }


   /* This here defines a character string */
#line 997 "data.yy.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 510 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 555 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 68 "data.yy.lpp"
{
#ifndef HAVE_STRNLEN
            size_t len = strlen(yytext)-2;
            datalval.string = new char[len + 1];
            datalval.string[len] = '\0';
            datalval.string = (char*) memcpy(datalval.string, yytext+1, len);
#else
            datalval.string = strndup(yytext+1, strlen(yytext)-2);
#endif
            //printf("Read string >%s<>%s<\n",yytext, datalval.string);
            myreturn(CHARACTER_STRING);
}
	YY_BREAK
/* comments */
case 2:
YY_RULE_SETUP
#line 81 "data.yy.lpp"
//printf("\n-->%s\n",yytext); /* nothing */
	YY_BREAK
/* whitespace */
case 3:
YY_RULE_SETUP
#line 83 "data.yy.lpp"
/* nothing */ 
	YY_BREAK
/* unknown */
case 4:
YY_RULE_SETUP
#line 86 "data.yy.lpp"
myreturn(COEFF);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 87 "data.yy.lpp"
myreturn(COVER);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 88 "data.yy.lpp"
myreturn(OBJ);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 89 "data.yy.lpp"
myreturn(DEFAULT);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 90 "data.yy.lpp"
myreturn(FROM);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 91 "data.yy.lpp"
myreturn(TO);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 92 "data.yy.lpp"
myreturn(TO_COME);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 93 "data.yy.lpp"
myreturn(NET_IN);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 94 "data.yy.lpp"
myreturn(NET_OUT);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 95 "data.yy.lpp"
myreturn(DIMEN);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 96 "data.yy.lpp"
myreturn(USING);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 98 "data.yy.lpp"
myreturn(ORDERED);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 99 "data.yy.lpp"
myreturn(CIRCULAR);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 100 "data.yy.lpp"
myreturn(REVERSED);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 101 "data.yy.lpp"
myreturn(SYMBOLIC);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 102 "data.yy.lpp"
myreturn(ARC);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 103 "data.yy.lpp"
myreturn(DETERMINISTIC);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 104 "data.yy.lpp"
myreturn(STOCHASTIC);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 106 "data.yy.lpp"
myreturn(RANDOM);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 107 "data.yy.lpp"
myreturn(PUBLIC);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 108 "data.yy.lpp"
myreturn(SETOF);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 109 "data.yy.lpp"
myreturn(BY);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 110 "data.yy.lpp"
myreturn(LESS);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 111 "data.yy.lpp"
myreturn(MOD);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 112 "data.yy.lpp"
myreturn(DIV);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 113 "data.yy.lpp"
myreturn(MIN); /*care function too*/
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 114 "data.yy.lpp"
myreturn(MAX); /*care fn too*/
	YY_BREAK
/* Types */
case 31:
YY_RULE_SETUP
#line 117 "data.yy.lpp"
myreturn(INTEGER);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 118 "data.yy.lpp"
myreturn(BINARY);
	YY_BREAK
/* Imperative commands */
case 33:
YY_RULE_SETUP
#line 121 "data.yy.lpp"
myreturn(CHECK);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 122 "data.yy.lpp"
myreturn(CLOSE);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 123 "data.yy.lpp"
myreturn(DISPLAY);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 124 "data.yy.lpp"
myreturn(DROP);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 125 "data.yy.lpp"
myreturn(INCLUDE);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 126 "data.yy.lpp"
myreturn(PRINT);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 127 "data.yy.lpp"
myreturn(PRINTF);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 128 "data.yy.lpp"
myreturn(QUIT);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 129 "data.yy.lpp"
myreturn(RESET);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 130 "data.yy.lpp"
myreturn(RESTORE);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 131 "data.yy.lpp"
myreturn(SOLVE);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 132 "data.yy.lpp"
myreturn(UPDATE);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 133 "data.yy.lpp"
myreturn(WRITE);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 134 "data.yy.lpp"
myreturn(SHELL);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 135 "data.yy.lpp"
myreturn(BLOCK);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 136 "data.yy.lpp"
myreturn(SBLOCK);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 137 "data.yy.lpp"
{
                 BEGIN(accept_model_type);
                 myreturn(MODEL);
               }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 141 "data.yy.lpp"
{
                 BEGIN(0);
                 myreturn(MODELTYPE);
               }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 145 "data.yy.lpp"
myreturn(BEG);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 146 "data.yy.lpp"
myreturn(CORE);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 147 "data.yy.lpp"
myreturn(INCLUDE);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 148 "data.yy.lpp"
myreturn(DATA);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 149 "data.yy.lpp"
myreturn(OPTION);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 150 "data.yy.lpp"
myreturn(LET);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 151 "data.yy.lpp"
myreturn(SOLUTION);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 152 "data.yy.lpp"
myreturn(FIX);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 153 "data.yy.lpp"
myreturn(UNFIX);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 154 "data.yy.lpp"
myreturn(END);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 155 "data.yy.lpp"
myreturn(FUNCTION);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 156 "data.yy.lpp"
myreturn(PIPE);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 157 "data.yy.lpp"
myreturn(FORMAT);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 158 "data.yy.lpp"
myreturn(TR);
	YY_BREAK
/* Conditionals */
case 65:
YY_RULE_SETUP
#line 161 "data.yy.lpp"
myreturn(IF);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 162 "data.yy.lpp"
myreturn(THEN);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 163 "data.yy.lpp"
myreturn(ELSE);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 164 "data.yy.lpp"
myreturn(AND);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 165 "data.yy.lpp"
myreturn(OR);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 166 "data.yy.lpp"
myreturn(EXISTS);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 167 "data.yy.lpp"
myreturn(FORALL);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 168 "data.yy.lpp"
myreturn(NOT);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 169 "data.yy.lpp"
myreturn(WITHIN);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 170 "data.yy.lpp"
myreturn(STAGES);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 171 "data.yy.lpp"
myreturn(STAGES);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 172 "data.yy.lpp"
myreturn(STAGE);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 173 "data.yy.lpp"
myreturn(NODE);
	YY_BREAK
/* looping */
case 78:
YY_RULE_SETUP
#line 176 "data.yy.lpp"
myreturn(WHILE);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 177 "data.yy.lpp"
myreturn(REPEAT);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 178 "data.yy.lpp"
myreturn(FOR);
	YY_BREAK
/* Set -> Scalar fns */
case 81:
YY_RULE_SETUP
#line 181 "data.yy.lpp"
myreturn(CARD);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 182 "data.yy.lpp"
myreturn(NEXT);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 183 "data.yy.lpp"
myreturn(NEXTW);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 184 "data.yy.lpp"
myreturn(PREV);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 185 "data.yy.lpp"
myreturn(PREVW);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 186 "data.yy.lpp"
myreturn(FIRST);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 187 "data.yy.lpp"
myreturn(LAST);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 188 "data.yy.lpp"
myreturn(MEMBER);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 189 "data.yy.lpp"
myreturn(ORD);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 190 "data.yy.lpp"
myreturn(ORD_ZERO);
	YY_BREAK
/* declarative */
case 91:
YY_RULE_SETUP
#line 193 "data.yy.lpp"
myreturn(VAR);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 194 "data.yy.lpp"
myreturn(PARAM);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 195 "data.yy.lpp"
myreturn(SET);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 196 "data.yy.lpp"
myreturn(MAXIMIZE);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 197 "data.yy.lpp"
myreturn(MINIMIZE);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 198 "data.yy.lpp"
myreturn(OBJECTIVE);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 199 "data.yy.lpp"
myreturn(SUBJECTTO);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 200 "data.yy.lpp"
myreturn(SUBJECTTO);
	YY_BREAK
/* iterative sum */
case 99:
YY_RULE_SETUP
#line 203 "data.yy.lpp"
myreturn(SUM);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 204 "data.yy.lpp"
myreturn(PROD);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 205 "data.yy.lpp"
myreturn(IN);
	YY_BREAK
/* operators */
case 102:
YY_RULE_SETUP
#line 208 "data.yy.lpp"
myreturn(DEFINED);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 209 "data.yy.lpp"
myreturn('+');
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 210 "data.yy.lpp"
myreturn('-');
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 211 "data.yy.lpp"
myreturn('*');
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 212 "data.yy.lpp"
myreturn('/');
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 213 "data.yy.lpp"
myreturn(POWER);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 214 "data.yy.lpp"
myreturn(POWER);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 215 "data.yy.lpp"
myreturn(LOGICAL_OR);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 216 "data.yy.lpp"
myreturn(LOGICAL_AND);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 217 "data.yy.lpp"
myreturn('!');
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 218 "data.yy.lpp"
myreturn(NE);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 219 "data.yy.lpp"
myreturn(LE);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 220 "data.yy.lpp"
myreturn(GE);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 221 "data.yy.lpp"
myreturn(EQ);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 222 "data.yy.lpp"
myreturn(LT);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 223 "data.yy.lpp"
myreturn(GT);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 224 "data.yy.lpp"
myreturn(ELLIPSE);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 225 "data.yy.lpp"
myreturn(ASSIGN);
	YY_BREAK
/* set operators */
case 120:
YY_RULE_SETUP
#line 228 "data.yy.lpp"
myreturn(UNION);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 229 "data.yy.lpp"
myreturn(DIFF);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 230 "data.yy.lpp"
myreturn(CROSS);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 231 "data.yy.lpp"
myreturn(INTER);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 232 "data.yy.lpp"
myreturn(SYMDIFF);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 233 "data.yy.lpp"
myreturn(SUFFIX);
	YY_BREAK
/* punctuation */
case 126:
YY_RULE_SETUP
#line 236 "data.yy.lpp"
myreturn(LBRACE);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 237 "data.yy.lpp"
myreturn(RBRACE);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 238 "data.yy.lpp"
myreturn(DOT);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 239 "data.yy.lpp"
myreturn(COMMA);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 240 "data.yy.lpp"
myreturn(SEMICOLON);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 241 "data.yy.lpp"
myreturn(LSBRACKET);
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 242 "data.yy.lpp"
myreturn(RSBRACKET);
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 243 "data.yy.lpp"
myreturn(LBRACKET);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 244 "data.yy.lpp"
myreturn(RBRACKET);
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 245 "data.yy.lpp"
myreturn(COLON);
	YY_BREAK
/* special stuff */
case 136:
YY_RULE_SETUP
#line 249 "data.yy.lpp"
myreturn(EXPECTATION);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 250 "data.yy.lpp"
myreturn(TIMESTAGE);
	YY_BREAK
/* Else it mut be an identifyer */
case 138:
YY_RULE_SETUP
#line 253 "data.yy.lpp"
{
         datalval.string = strdup(yytext);
         BEGIN(0);
         myreturn(ID);
      }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 258 "data.yy.lpp"
ECHO;
	YY_BREAK
#line 1819 "data.yy.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(accept_model_type):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 510 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 510 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 509);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 258 "data.yy.lpp"

