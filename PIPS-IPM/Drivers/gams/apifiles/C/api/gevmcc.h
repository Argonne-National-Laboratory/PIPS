/* gevmcc.h
 * Header file for C-style interface to the GEV library
 * generated by apiwrapper for GAMS Version 24.8.3
 * Copyright (c) 2016, GAMS Development Corp.
 */

#if ! defined(_GEVCC_H_)
#     define  _GEVCC_H_

#define GEVAPIVERSION 6



enum gevLogStatMode {
  gevdoErr  = 0,
  gevdoStat = 1,
  gevdoLog  = 2  };

enum gevCallSolverMode {
  gevSolverSameStreams = 0,
  gevSolverQuiet       = 1,
  gevSolverOwnFile     = 2  };

enum gevCallSolverSolveLink {
  gevSolveLinkCallScript    = 1,
  gevSolveLinkCallModule    = 2,
  gevSolveLinkAsyncGrid     = 3,
  gevSolveLinkAsyncSimulate = 4,
  gevSolveLinkLoadLibrary   = 5  };
#define gevAlgFileType  "AlgFileType"  /* gevOptions */
#define gevGamsVersion  "GamsVersion"
#define gevLogOption    "LogOption"
#define gevReform       "Reform"
#define gevIDEFlag      "IDEFlag"
#define gevDomLim       "DomLim"
#define gevIterLim      "IterLim"
#define gevNodeLim      "NodeLim"
#define gevSysOut       "SysOut"
#define gevInteger1     "Integer1"
#define gevInteger2     "Integer2"
#define gevInteger3     "Integer3"
#define gevInteger4     "Integer4"
#define gevInteger5     "Integer5"
#define gevGenSolver    "GenSolver"
#define gevCurSolver    "CurSolver"
#define gevPageWidth    "PageWidth"
#define gevPageSize     "PageSize"
#define gevKeep         "Keep"
#define gevThreadsRaw   "ThreadsRaw"
#define gevFDOpt        "FDOpt"
#define gevOptCR        "OptCR"
#define gevOptCA        "OptCA"
#define gevResLim       "ResLim"
#define gevWorkSpace    "WorkSpace"
#define gevWorkFactor   "WorkFactor"
#define gevCutOff       "CutOff"
#define gevUseCutOff    "UseCutOff"
#define gevCheat        "Cheat"
#define gevUseCheat     "UseCheat"
#define gevTryInt       "TryInt"
#define gevReal1        "Real1"
#define gevReal2        "Real2"
#define gevReal3        "Real3"
#define gevReal4        "Real4"
#define gevReal5        "Real5"
#define gevHeapLimit    "HeapLimit"
#define gevFDDelta      "FDDelta"
#define gevNameCtrFile  "NameCtrFile"
#define gevNameLogFile  "NameLogFile"
#define gevNameStaFile  "NameStaFile"
#define gevNameScrDir   "NameScrDir"
#define gevNameGamsDate "NameGamsDate"
#define gevNameGamsTime "NameGamsTime"
#define gevNameSysDir   "NameSysDir"
#define gevNameWrkDir   "NameWrkDir"
#define gevNameCurDir   "NameCurDir"
#define gevLicense1     "License1"
#define gevLicense2     "License2"
#define gevLicense3     "License3"
#define gevLicense4     "License4"
#define gevLicense5     "License5"
#define gevNameMatrix   "NameMatrix"
#define gevNameInstr    "NameInstr"
#define gevNameParams   "NameParams"
#define gevNameScrExt   "NameScrExt"
#define gevNameScenFile "NameScenFile"
#define gevNameExtFFile "NameExtFFile"



#if defined(_WIN32)
# define GEV_CALLCONV __stdcall
#else
# define GEV_CALLCONV
#endif

#if defined(__cplusplus)
extern "C" {
#endif

struct gevRec;
typedef struct gevRec *gevHandle_t;

typedef int (*gevErrorCallback_t) (int ErrCount, const char *msg);

/* headers for "wrapper" routines implemented in C */
int gevGetReady  (char *msgBuf, int msgBufLen);
int gevGetReadyD (const char *dirName, char *msgBuf, int msgBufLen);
int gevGetReadyL (const char *libName, char *msgBuf, int msgBufLen);
int gevCreate    (gevHandle_t *pgev, char *msgBuf, int msgBufLen);
int gevCreateD   (gevHandle_t *pgev, const char *dirName, char *msgBuf, int msgBufLen);
int gevCreateDD  (gevHandle_t *pgev, const char *dirName, char *msgBuf, int msgBufLen);
int gevCreateL   (gevHandle_t *pgev, const char *libName, char *msgBuf, int msgBufLen);
int gevFree      (gevHandle_t *pgev);

int gevLibraryLoaded(void);
int gevLibraryUnload(void);

int  gevGetScreenIndicator   (void);
void gevSetScreenIndicator   (int scrind);
int  gevGetExceptionIndicator(void);
void gevSetExceptionIndicator(int excind);
int  gevGetExitIndicator     (void);
void gevSetExitIndicator     (int extind);
gevErrorCallback_t gevGetErrorCallback(void);
void gevSetErrorCallback(gevErrorCallback_t func);
int  gevGetAPIErrorCount     (void);
void gevSetAPIErrorCount     (int ecnt);

void gevErrorHandling(const char *msg);
void gevInitMutexes(void);
void gevFiniMutexes(void);


#if defined(GEV_MAIN)    /* we must define some things only once */
# define GEV_FUNCPTR(NAME)  NAME##_t NAME = NULL
#else
# define GEV_FUNCPTR(NAME)  extern NAME##_t NAME
#endif

/* function typedefs and pointer definitions */

typedef void (GEV_CALLCONV *Tgevlswrite_t) (const char *msg, int mode, void *usrmem);

/* Prototypes for Dummy Functions */
void  GEV_CALLCONV d_gevRegisterWriteCallback (gevHandle_t pgev, Tgevlswrite_t lsw, int logenabled, void *usrmem);
void  GEV_CALLCONV d_gevCompleteEnvironment (gevHandle_t pgev, void *palg, void *ivec, void *rvec, void *svec);
int  GEV_CALLCONV d_gevInitEnvironmentLegacy (gevHandle_t pgev, const char *cntrfn);
int  GEV_CALLCONV d_gevSwitchLogStat (gevHandle_t pgev, int lo, const char *logfn, int logappend, const char *statfn, int statappend, Tgevlswrite_t lsw, void *usrmem, void **lshandle);
void * GEV_CALLCONV d_gevGetLShandle (gevHandle_t pgev);
int  GEV_CALLCONV d_gevRestoreLogStat (gevHandle_t pgev, void **lshandle);
int  GEV_CALLCONV d_gevRestoreLogStatRewrite (gevHandle_t pgev, void **lshandle);
void  GEV_CALLCONV d_gevLog (gevHandle_t pgev, const char *s);
void  GEV_CALLCONV d_gevLogPChar (gevHandle_t pgev, const char *p);
void  GEV_CALLCONV d_gevStat (gevHandle_t pgev, const char *s);
void  GEV_CALLCONV d_gevStatC (gevHandle_t pgev, const char *s);
void  GEV_CALLCONV d_gevStatPChar (gevHandle_t pgev, const char *p);
void  GEV_CALLCONV d_gevStatAudit (gevHandle_t pgev, const char *s);
void  GEV_CALLCONV d_gevStatCon (gevHandle_t pgev);
void  GEV_CALLCONV d_gevStatCoff (gevHandle_t pgev);
void  GEV_CALLCONV d_gevStatEOF (gevHandle_t pgev);
void  GEV_CALLCONV d_gevStatSysout (gevHandle_t pgev);
void  GEV_CALLCONV d_gevStatAddE (gevHandle_t pgev, int mi, const char *s);
void  GEV_CALLCONV d_gevStatAddV (gevHandle_t pgev, int mj, const char *s);
void  GEV_CALLCONV d_gevStatAddJ (gevHandle_t pgev, int mi, int mj, const char *s);
void  GEV_CALLCONV d_gevStatEject (gevHandle_t pgev);
void  GEV_CALLCONV d_gevStatEdit (gevHandle_t pgev, const char C);
void  GEV_CALLCONV d_gevStatE (gevHandle_t pgev, const char *s, int mi, const char *s2);
void  GEV_CALLCONV d_gevStatV (gevHandle_t pgev, const char *s, int mj, const char *s2);
void  GEV_CALLCONV d_gevStatT (gevHandle_t pgev);
void  GEV_CALLCONV d_gevStatA (gevHandle_t pgev, const char *s);
void  GEV_CALLCONV d_gevStatB (gevHandle_t pgev, const char *s);
void  GEV_CALLCONV d_gevLogStat (gevHandle_t pgev, const char *s);
void  GEV_CALLCONV d_gevLogStatNoC (gevHandle_t pgev, const char *s);
void  GEV_CALLCONV d_gevLogStatPChar (gevHandle_t pgev, const char *p);
void  GEV_CALLCONV d_gevLogStatFlush (gevHandle_t pgev);
char * GEV_CALLCONV d_gevGetAnchor (gevHandle_t pgev, const char *s, char *buf);
int  GEV_CALLCONV d_gevStatAppend (gevHandle_t pgev, const char *statfn, char *msg);
void  GEV_CALLCONV d_gevMIPReport (gevHandle_t pgev, void *gmoptr, double fixobj, int fixiter, double agap, double rgap);
int  GEV_CALLCONV d_gevGetSlvExeInfo (gevHandle_t pgev, const char *solvername, char *exename);
int  GEV_CALLCONV d_gevGetSlvLibInfo (gevHandle_t pgev, const char *solvername, char *libname, char *prefix, int *ifversion);
int  GEV_CALLCONV d_gevCapabilityCheck (gevHandle_t pgev, int modeltype, const char *solvername, int *capable);
int  GEV_CALLCONV d_gevSolverVisibility (gevHandle_t pgev, const char *solvername, int *hidden, int *defaultok);
int  GEV_CALLCONV d_gevNumSolvers (gevHandle_t pgev);
char * GEV_CALLCONV d_gevGetSolver (gevHandle_t pgev, int modeltype, char *buf);
char * GEV_CALLCONV d_gevGetCurrentSolver (gevHandle_t pgev, void *gmoptr, char *buf);
char * GEV_CALLCONV d_gevGetSolverDefault (gevHandle_t pgev, int modeltype, char *buf);
int  GEV_CALLCONV d_gevSolver2Id (gevHandle_t pgev, const char *solvername);
char * GEV_CALLCONV d_gevId2Solver (gevHandle_t pgev, int solverid, char *buf);
char * GEV_CALLCONV d_gevCallSolverNextGridDir (gevHandle_t pgev, char *buf);
int  GEV_CALLCONV d_gevCallSolver (gevHandle_t pgev, void *gmoptr, const char *cntrfn, const char *solvername, int solvelink, int Logging, const char *logfn, const char *statfn, double reslim, int iterlim, int domlim, double optcr, double optca, void **jobhandle, char *msg);
int  GEV_CALLCONV d_gevCallSolverHandleStatus (gevHandle_t pgev, void *jobhandle);
int  GEV_CALLCONV d_gevCallSolverHandleDelete (gevHandle_t pgev, void **jobhandle);
int  GEV_CALLCONV d_gevCallSolverHandleCollect (gevHandle_t pgev, void **jobhandle, void *gmoptr);
int  GEV_CALLCONV d_gevGetIntOpt (gevHandle_t pgev, const char *optname);
double  GEV_CALLCONV d_gevGetDblOpt (gevHandle_t pgev, const char *optname);
char * GEV_CALLCONV d_gevGetStrOpt (gevHandle_t pgev, const char *optname, char *buf);
void  GEV_CALLCONV d_gevSetIntOpt (gevHandle_t pgev, const char *optname, int ival);
void  GEV_CALLCONV d_gevSetDblOpt (gevHandle_t pgev, const char *optname, double rval);
void  GEV_CALLCONV d_gevSetStrOpt (gevHandle_t pgev, const char *optname, const char *sval);
void  GEV_CALLCONV d_gevSynchronizeOpt (gevHandle_t pgev, void *optptr);
double  GEV_CALLCONV d_gevTimeJNow (gevHandle_t pgev);
double  GEV_CALLCONV d_gevTimeDiff (gevHandle_t pgev);
double  GEV_CALLCONV d_gevTimeDiffStart (gevHandle_t pgev);
void  GEV_CALLCONV d_gevTimeSetStart (gevHandle_t pgev);
void  GEV_CALLCONV d_gevTerminateUninstall (gevHandle_t pgev);
void  GEV_CALLCONV d_gevTerminateInstall (gevHandle_t pgev);
void  GEV_CALLCONV d_gevTerminateSet (gevHandle_t pgev, void *intr, void *ehdler);
int  GEV_CALLCONV d_gevTerminateGet (gevHandle_t pgev);
void  GEV_CALLCONV d_gevTerminateClear (gevHandle_t pgev);
void  GEV_CALLCONV d_gevTerminateRaise (gevHandle_t pgev);
void  GEV_CALLCONV d_gevTerminateGetHandler (gevHandle_t pgev, void **intr, void **ehdler);
char * GEV_CALLCONV d_gevGetScratchName (gevHandle_t pgev, const char *s, char *buf);
int  GEV_CALLCONV d_gevWriteModelInstance (gevHandle_t pgev, const char *mifn, void *gmoptr, int *nlcodelen);
int  GEV_CALLCONV d_gevDuplicateScratchDir (gevHandle_t pgev, const char *scrdir, const char *logfn, char *cntrfn);
int  GEV_CALLCONV d_gevInitJacLegacy (gevHandle_t pgev, void **evalptr, void *gmoptr);
void  GEV_CALLCONV d_gevSetColRowPermLegacy (gevHandle_t pgev, void *evalptr, int n, int cgms2slv[], int m, int rgms2slv[]);
void  GEV_CALLCONV d_gevSetJacPermLegacy (gevHandle_t pgev, void *evalptr, int njacs, int jacs[], int jgms2slv[]);
int  GEV_CALLCONV d_gevEvalNewPointLegacy (gevHandle_t pgev, void *evalptr, double x[]);
int  GEV_CALLCONV d_gevEvalJacLegacy (gevHandle_t pgev, void *evalptr, int si, double x[], double *f, double jac[], int *domviol, int *njacsupd);
int  GEV_CALLCONV d_gevEvalJacLegacyX (gevHandle_t pgev, void *evalptr, int cnt, int rowidx[], double x[], double fvec[], double jac[], int *domviol, int *njacsupd);
int  GEV_CALLCONV d_gevNextNLLegacy (gevHandle_t pgev, void *evalptr, int si);
int  GEV_CALLCONV d_gevRowGms2SlvLegacy (gevHandle_t pgev, void *evalptr, int si);
void  GEV_CALLCONV d_gevFreeJacLegacy (gevHandle_t pgev, void **evalptr);
void * GEV_CALLCONV d_gevGetALGX (gevHandle_t pgev);
void GEV_CALLCONV d_gevSkipIOLegacySet (gevHandle_t pgev, const int x);
int  GEV_CALLCONV d_gevThreads (gevHandle_t pgev);
double  GEV_CALLCONV d_gevNSolves (gevHandle_t pgev);

typedef void  (GEV_CALLCONV *gevRegisterWriteCallback_t) (gevHandle_t pgev, Tgevlswrite_t lsw, int logenabled, void *usrmem);
GEV_FUNCPTR(gevRegisterWriteCallback);
typedef void  (GEV_CALLCONV *gevCompleteEnvironment_t) (gevHandle_t pgev, void *palg, void *ivec, void *rvec, void *svec);
GEV_FUNCPTR(gevCompleteEnvironment);
typedef int  (GEV_CALLCONV *gevInitEnvironmentLegacy_t) (gevHandle_t pgev, const char *cntrfn);
GEV_FUNCPTR(gevInitEnvironmentLegacy);
typedef int  (GEV_CALLCONV *gevSwitchLogStat_t) (gevHandle_t pgev, int lo, const char *logfn, int logappend, const char *statfn, int statappend, Tgevlswrite_t lsw, void *usrmem, void **lshandle);
GEV_FUNCPTR(gevSwitchLogStat);
typedef void * (GEV_CALLCONV *gevGetLShandle_t) (gevHandle_t pgev);
GEV_FUNCPTR(gevGetLShandle);
typedef int  (GEV_CALLCONV *gevRestoreLogStat_t) (gevHandle_t pgev, void **lshandle);
GEV_FUNCPTR(gevRestoreLogStat);
typedef int  (GEV_CALLCONV *gevRestoreLogStatRewrite_t) (gevHandle_t pgev, void **lshandle);
GEV_FUNCPTR(gevRestoreLogStatRewrite);
typedef void  (GEV_CALLCONV *gevLog_t) (gevHandle_t pgev, const char *s);
GEV_FUNCPTR(gevLog);
typedef void  (GEV_CALLCONV *gevLogPChar_t) (gevHandle_t pgev, const char *p);
GEV_FUNCPTR(gevLogPChar);
typedef void  (GEV_CALLCONV *gevStat_t) (gevHandle_t pgev, const char *s);
GEV_FUNCPTR(gevStat);
typedef void  (GEV_CALLCONV *gevStatC_t) (gevHandle_t pgev, const char *s);
GEV_FUNCPTR(gevStatC);
typedef void  (GEV_CALLCONV *gevStatPChar_t) (gevHandle_t pgev, const char *p);
GEV_FUNCPTR(gevStatPChar);
typedef void  (GEV_CALLCONV *gevStatAudit_t) (gevHandle_t pgev, const char *s);
GEV_FUNCPTR(gevStatAudit);
typedef void  (GEV_CALLCONV *gevStatCon_t) (gevHandle_t pgev);
GEV_FUNCPTR(gevStatCon);
typedef void  (GEV_CALLCONV *gevStatCoff_t) (gevHandle_t pgev);
GEV_FUNCPTR(gevStatCoff);
typedef void  (GEV_CALLCONV *gevStatEOF_t) (gevHandle_t pgev);
GEV_FUNCPTR(gevStatEOF);
typedef void  (GEV_CALLCONV *gevStatSysout_t) (gevHandle_t pgev);
GEV_FUNCPTR(gevStatSysout);
typedef void  (GEV_CALLCONV *gevStatAddE_t) (gevHandle_t pgev, int mi, const char *s);
GEV_FUNCPTR(gevStatAddE);
typedef void  (GEV_CALLCONV *gevStatAddV_t) (gevHandle_t pgev, int mj, const char *s);
GEV_FUNCPTR(gevStatAddV);
typedef void  (GEV_CALLCONV *gevStatAddJ_t) (gevHandle_t pgev, int mi, int mj, const char *s);
GEV_FUNCPTR(gevStatAddJ);
typedef void  (GEV_CALLCONV *gevStatEject_t) (gevHandle_t pgev);
GEV_FUNCPTR(gevStatEject);
typedef void  (GEV_CALLCONV *gevStatEdit_t) (gevHandle_t pgev, const char C);
GEV_FUNCPTR(gevStatEdit);
typedef void  (GEV_CALLCONV *gevStatE_t) (gevHandle_t pgev, const char *s, int mi, const char *s2);
GEV_FUNCPTR(gevStatE);
typedef void  (GEV_CALLCONV *gevStatV_t) (gevHandle_t pgev, const char *s, int mj, const char *s2);
GEV_FUNCPTR(gevStatV);
typedef void  (GEV_CALLCONV *gevStatT_t) (gevHandle_t pgev);
GEV_FUNCPTR(gevStatT);
typedef void  (GEV_CALLCONV *gevStatA_t) (gevHandle_t pgev, const char *s);
GEV_FUNCPTR(gevStatA);
typedef void  (GEV_CALLCONV *gevStatB_t) (gevHandle_t pgev, const char *s);
GEV_FUNCPTR(gevStatB);
typedef void  (GEV_CALLCONV *gevLogStat_t) (gevHandle_t pgev, const char *s);
GEV_FUNCPTR(gevLogStat);
typedef void  (GEV_CALLCONV *gevLogStatNoC_t) (gevHandle_t pgev, const char *s);
GEV_FUNCPTR(gevLogStatNoC);
typedef void  (GEV_CALLCONV *gevLogStatPChar_t) (gevHandle_t pgev, const char *p);
GEV_FUNCPTR(gevLogStatPChar);
typedef void  (GEV_CALLCONV *gevLogStatFlush_t) (gevHandle_t pgev);
GEV_FUNCPTR(gevLogStatFlush);
typedef char * (GEV_CALLCONV *gevGetAnchor_t) (gevHandle_t pgev, const char *s, char *buf);
GEV_FUNCPTR(gevGetAnchor);
typedef int  (GEV_CALLCONV *gevStatAppend_t) (gevHandle_t pgev, const char *statfn, char *msg);
GEV_FUNCPTR(gevStatAppend);
typedef void  (GEV_CALLCONV *gevMIPReport_t) (gevHandle_t pgev, void *gmoptr, double fixobj, int fixiter, double agap, double rgap);
GEV_FUNCPTR(gevMIPReport);
typedef int  (GEV_CALLCONV *gevGetSlvExeInfo_t) (gevHandle_t pgev, const char *solvername, char *exename);
GEV_FUNCPTR(gevGetSlvExeInfo);
typedef int  (GEV_CALLCONV *gevGetSlvLibInfo_t) (gevHandle_t pgev, const char *solvername, char *libname, char *prefix, int *ifversion);
GEV_FUNCPTR(gevGetSlvLibInfo);
typedef int  (GEV_CALLCONV *gevCapabilityCheck_t) (gevHandle_t pgev, int modeltype, const char *solvername, int *capable);
GEV_FUNCPTR(gevCapabilityCheck);
typedef int  (GEV_CALLCONV *gevSolverVisibility_t) (gevHandle_t pgev, const char *solvername, int *hidden, int *defaultok);
GEV_FUNCPTR(gevSolverVisibility);
typedef int  (GEV_CALLCONV *gevNumSolvers_t) (gevHandle_t pgev);
GEV_FUNCPTR(gevNumSolvers);
typedef char * (GEV_CALLCONV *gevGetSolver_t) (gevHandle_t pgev, int modeltype, char *buf);
GEV_FUNCPTR(gevGetSolver);
typedef char * (GEV_CALLCONV *gevGetCurrentSolver_t) (gevHandle_t pgev, void *gmoptr, char *buf);
GEV_FUNCPTR(gevGetCurrentSolver);
typedef char * (GEV_CALLCONV *gevGetSolverDefault_t) (gevHandle_t pgev, int modeltype, char *buf);
GEV_FUNCPTR(gevGetSolverDefault);
typedef int  (GEV_CALLCONV *gevSolver2Id_t) (gevHandle_t pgev, const char *solvername);
GEV_FUNCPTR(gevSolver2Id);
typedef char * (GEV_CALLCONV *gevId2Solver_t) (gevHandle_t pgev, int solverid, char *buf);
GEV_FUNCPTR(gevId2Solver);
typedef char * (GEV_CALLCONV *gevCallSolverNextGridDir_t) (gevHandle_t pgev, char *buf);
GEV_FUNCPTR(gevCallSolverNextGridDir);
typedef int  (GEV_CALLCONV *gevCallSolver_t) (gevHandle_t pgev, void *gmoptr, const char *cntrfn, const char *solvername, int solvelink, int Logging, const char *logfn, const char *statfn, double reslim, int iterlim, int domlim, double optcr, double optca, void **jobhandle, char *msg);
GEV_FUNCPTR(gevCallSolver);
typedef int  (GEV_CALLCONV *gevCallSolverHandleStatus_t) (gevHandle_t pgev, void *jobhandle);
GEV_FUNCPTR(gevCallSolverHandleStatus);
typedef int  (GEV_CALLCONV *gevCallSolverHandleDelete_t) (gevHandle_t pgev, void **jobhandle);
GEV_FUNCPTR(gevCallSolverHandleDelete);
typedef int  (GEV_CALLCONV *gevCallSolverHandleCollect_t) (gevHandle_t pgev, void **jobhandle, void *gmoptr);
GEV_FUNCPTR(gevCallSolverHandleCollect);
typedef int  (GEV_CALLCONV *gevGetIntOpt_t) (gevHandle_t pgev, const char *optname);
GEV_FUNCPTR(gevGetIntOpt);
typedef double  (GEV_CALLCONV *gevGetDblOpt_t) (gevHandle_t pgev, const char *optname);
GEV_FUNCPTR(gevGetDblOpt);
typedef char * (GEV_CALLCONV *gevGetStrOpt_t) (gevHandle_t pgev, const char *optname, char *buf);
GEV_FUNCPTR(gevGetStrOpt);
typedef void  (GEV_CALLCONV *gevSetIntOpt_t) (gevHandle_t pgev, const char *optname, int ival);
GEV_FUNCPTR(gevSetIntOpt);
typedef void  (GEV_CALLCONV *gevSetDblOpt_t) (gevHandle_t pgev, const char *optname, double rval);
GEV_FUNCPTR(gevSetDblOpt);
typedef void  (GEV_CALLCONV *gevSetStrOpt_t) (gevHandle_t pgev, const char *optname, const char *sval);
GEV_FUNCPTR(gevSetStrOpt);
typedef void  (GEV_CALLCONV *gevSynchronizeOpt_t) (gevHandle_t pgev, void *optptr);
GEV_FUNCPTR(gevSynchronizeOpt);
typedef double  (GEV_CALLCONV *gevTimeJNow_t) (gevHandle_t pgev);
GEV_FUNCPTR(gevTimeJNow);
typedef double  (GEV_CALLCONV *gevTimeDiff_t) (gevHandle_t pgev);
GEV_FUNCPTR(gevTimeDiff);
typedef double  (GEV_CALLCONV *gevTimeDiffStart_t) (gevHandle_t pgev);
GEV_FUNCPTR(gevTimeDiffStart);
typedef void  (GEV_CALLCONV *gevTimeSetStart_t) (gevHandle_t pgev);
GEV_FUNCPTR(gevTimeSetStart);
typedef void  (GEV_CALLCONV *gevTerminateUninstall_t) (gevHandle_t pgev);
GEV_FUNCPTR(gevTerminateUninstall);
typedef void  (GEV_CALLCONV *gevTerminateInstall_t) (gevHandle_t pgev);
GEV_FUNCPTR(gevTerminateInstall);
typedef void  (GEV_CALLCONV *gevTerminateSet_t) (gevHandle_t pgev, void *intr, void *ehdler);
GEV_FUNCPTR(gevTerminateSet);
typedef int  (GEV_CALLCONV *gevTerminateGet_t) (gevHandle_t pgev);
GEV_FUNCPTR(gevTerminateGet);
typedef void  (GEV_CALLCONV *gevTerminateClear_t) (gevHandle_t pgev);
GEV_FUNCPTR(gevTerminateClear);
typedef void  (GEV_CALLCONV *gevTerminateRaise_t) (gevHandle_t pgev);
GEV_FUNCPTR(gevTerminateRaise);
typedef void  (GEV_CALLCONV *gevTerminateGetHandler_t) (gevHandle_t pgev, void **intr, void **ehdler);
GEV_FUNCPTR(gevTerminateGetHandler);
typedef char * (GEV_CALLCONV *gevGetScratchName_t) (gevHandle_t pgev, const char *s, char *buf);
GEV_FUNCPTR(gevGetScratchName);
typedef int  (GEV_CALLCONV *gevWriteModelInstance_t) (gevHandle_t pgev, const char *mifn, void *gmoptr, int *nlcodelen);
GEV_FUNCPTR(gevWriteModelInstance);
typedef int  (GEV_CALLCONV *gevDuplicateScratchDir_t) (gevHandle_t pgev, const char *scrdir, const char *logfn, char *cntrfn);
GEV_FUNCPTR(gevDuplicateScratchDir);
typedef int  (GEV_CALLCONV *gevInitJacLegacy_t) (gevHandle_t pgev, void **evalptr, void *gmoptr);
GEV_FUNCPTR(gevInitJacLegacy);
typedef void  (GEV_CALLCONV *gevSetColRowPermLegacy_t) (gevHandle_t pgev, void *evalptr, int n, int cgms2slv[], int m, int rgms2slv[]);
GEV_FUNCPTR(gevSetColRowPermLegacy);
typedef void  (GEV_CALLCONV *gevSetJacPermLegacy_t) (gevHandle_t pgev, void *evalptr, int njacs, int jacs[], int jgms2slv[]);
GEV_FUNCPTR(gevSetJacPermLegacy);
typedef int  (GEV_CALLCONV *gevEvalNewPointLegacy_t) (gevHandle_t pgev, void *evalptr, double x[]);
GEV_FUNCPTR(gevEvalNewPointLegacy);
typedef int  (GEV_CALLCONV *gevEvalJacLegacy_t) (gevHandle_t pgev, void *evalptr, int si, double x[], double *f, double jac[], int *domviol, int *njacsupd);
GEV_FUNCPTR(gevEvalJacLegacy);
typedef int  (GEV_CALLCONV *gevEvalJacLegacyX_t) (gevHandle_t pgev, void *evalptr, int cnt, int rowidx[], double x[], double fvec[], double jac[], int *domviol, int *njacsupd);
GEV_FUNCPTR(gevEvalJacLegacyX);
typedef int  (GEV_CALLCONV *gevNextNLLegacy_t) (gevHandle_t pgev, void *evalptr, int si);
GEV_FUNCPTR(gevNextNLLegacy);
typedef int  (GEV_CALLCONV *gevRowGms2SlvLegacy_t) (gevHandle_t pgev, void *evalptr, int si);
GEV_FUNCPTR(gevRowGms2SlvLegacy);
typedef void  (GEV_CALLCONV *gevFreeJacLegacy_t) (gevHandle_t pgev, void **evalptr);
GEV_FUNCPTR(gevFreeJacLegacy);
typedef void * (GEV_CALLCONV *gevGetALGX_t) (gevHandle_t pgev);
GEV_FUNCPTR(gevGetALGX);
typedef void (GEV_CALLCONV *gevSkipIOLegacySet_t) (gevHandle_t pgev, const int x);
GEV_FUNCPTR(gevSkipIOLegacySet);
typedef int  (GEV_CALLCONV *gevThreads_t) (gevHandle_t pgev);
GEV_FUNCPTR(gevThreads);
typedef double  (GEV_CALLCONV *gevNSolves_t) (gevHandle_t pgev);
GEV_FUNCPTR(gevNSolves);
#if defined(__cplusplus)
}
#endif
#endif /* #if ! defined(_GEVCC_H_) */
