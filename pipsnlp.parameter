!-------------------------------------------------------------------------
!		General Options
!-------------------------------------------------------------------------
! print out level  (1)
prtLvl 1
! convergence tolerance (1e-6)
conv_tol 1e-6
! max number of iterations (500)
max_iter 500
! How to deal with the parallel setting. (0): do not adding slacks  1: adding slacks
AddSlackParallelSetting 0

!-------------------------------------------------------------------------
!		Options about Iterative Refinement (IR)
!-------------------------------------------------------------------------
! do IR for the Augmented system. 0: do not perform    (1): perform it
DoIR_Aug 1
! do IR for the full KKT system. (0): do not perform    1: perform it
DoIR_Full 0
! Max number if IR iterations (10)
MaxIR 10
! tolerance of IR (1e-12)
IRtol 1e-12

!-------------------------------------------------------------------------
!		linear solver
!-------------------------------------------------------------------------
! 	0:Ma27 	(1):Ma57  	2:pardiso
LinearAlgSolver 1
!  	HSL pivot level. range is (0,0.5],  0:fast, 0.5:stable 	(1e-4)
HSL_PivotLV		1e-4
! MA57 Ordering method: (5) automatic choice(MA47 or Metis); 4 use Metis (ND); 3 min degree ordering as in MA27; 2 use MC47;
MA57_Ordering 5

!-------------------------------------------------------------------------
!		about inertia-free test
!-------------------------------------------------------------------------
! (0): test inertia   1: do dWd test  2: tWt test (set d=n+t)  
dWd_test 0
! (0): do not perform the dWd/tWt test for soc step  1: perform test
dWd_test_soc	0
! (1e-10): this is the constant used in test dWd >= kappa_tWt d'd
kappa_tWt	1e-10
! add mu in the test dWd >= kappa_tWt * mu * d'd   (1): add mu	0: without mu
kappaWithMu	1


!-------------------------------------------------------------------------
!		filter line search algorithm
!-------------------------------------------------------------------------
! second order correction (SOC).  0: do not perform SOC   (1): perform second order correction
DoSOC	1
! Filter 0: do not perform filter test   (1): perform filter test
UseFilter	1
! reset Filter, this is the max number of previous iter rejected by filter. 0: do not apply    (5): reset
FilterResetStep		5
! tiny step test. 0: do not perform tiny step test    (1): perform tiny step test
DoTinyStepTest	1
! assume Mat is always singular once detected. (0): do not perform    1: perform it
AssumeMatSingular	0
! check constraint violation in switching condition	0: do not perform    1: perform it
CheckSmallConstVio	1
! max number of line search  (50)
LineSearchMatStep	50







!-------------------------------------------------------------------------
!		PETSC
!-------------------------------------------------------------------------
! 	use petsc iterative solver or not (0)
UsePetsc			0
! 	use user defined PC or not. (0): use petsc's option 0, 1: use original sys, 2: use Jacek's idea
User_Defined_PC		2
!	use user defined symmetric form or not: (0): use petsc's form, 1: use user defined form
User_Defined_SymMat	1
! 	use petsc to do the outer solve. (0): do not perform    1: perform it
UsePetscOuter		1


!-------------------------------------------------------------------------
!		Reduced space solver
!-------------------------------------------------------------------------
! (0): default, full space solver  1:reduced space  2:reduced space, but decision var are 1st var(with LinearAlgSolver=3)
UseReducedSpace		0
! (0): default, build Dense Schur from full space matrix  1: build Dense Schur from reduced space matrix 
RS_SchurSolver		1
! (0): do iterative refinement from the linear solver, this is the max number of IR
RS_MaxIR	5
! (0.0001)  Stable->Fast 1->0
RS_LU_PivotLV	0.0001

!-------------------------------------------------------------------------
!		schur complement solver
!-------------------------------------------------------------------------
! (0): do not build SC(sparse solve)   1: use dense Schur	2: use sparse Schur  
BuildSchurComp		1

!how to compute Schur
! (0): LDLt  2: BICG
SolveSchurScheme	0

!-------------------------------------------------------------------------
     Use Partitioning Algorithm
!-------------------------------------------------------------------------
! (0) not use   1:use 
NP_Alg	0



! method to update dual regularization	(0): ipopt way (1): vz way (10): ori obj
UseDualRegAlg 0
